diff --git a/app/src/lib/editors/launch.ts b/app/src/lib/editors/launch.ts
index 1d098f384..3746b75c2 100644
--- a/app/src/lib/editors/launch.ts
+++ b/app/src/lib/editors/launch.ts
@@ -1,5 +1,6 @@
 import { spawn, SpawnOptions } from 'child_process'
 import { pathExists } from 'fs-extra'
+import { join } from 'path'
 import { ExternalEditorError, FoundEditor } from './shared'
 
 /**
@@ -13,7 +14,17 @@ export async function launchExternalEditor(
   editor: FoundEditor
 ): Promise<void> {
   const editorPath = editor.path
-  const exists = await pathExists(editorPath)
+  let exists
+  if (process.env.FLATPAK_HOST !== 'undefined') {
+    if (editorPath.indexOf("/usr") > -1) {
+      exists = await pathExists(join("/var/run/host", editorPath))
+    }
+    else {
+      exists = await pathExists(editorPath)
+    }
+  } else {
+    exists = await pathExists(editorPath)
+  }
   if (!exists) {
     const label = __DARWIN__ ? 'Preferences' : 'Options'
     throw new ExternalEditorError(
@@ -30,12 +41,20 @@ export async function launchExternalEditor(
   }
 
   if (editor.usesShell) {
-    spawn(`"${editorPath}"`, [`"${fullPath}"`], { ...opts, shell: true })
+    if (process.env.FLATPAK_HOST !== 'undefined') {
+      spawn('flatpak-spawn', ['--host', `"${editorPath}"`, `"${fullPath}"`], { ...opts, shell: true })
+    } else {
+      spawn(`"${editorPath}"`, [`"${fullPath}"`], { ...opts, shell: true })
+    }
   } else if (__DARWIN__) {
     // In macOS we can use `open`, which will open the right executable file
     // for us, we only need the path to the editor .app folder.
     spawn('open', ['-a', editorPath, fullPath], opts)
   } else {
-    spawn(editorPath, [fullPath], opts)
+    if (process.env.FLATPAK_HOST !== 'undefined') {
+      spawn('flatpak-spawn', ['--host', editorPath, fullPath], opts)
+    } else {
+      spawn(editorPath, [fullPath], opts)
+    }
   }
 }
diff --git a/app/src/lib/editors/linux.ts b/app/src/lib/editors/linux.ts
index 314344dde..fe1f787d1 100644
--- a/app/src/lib/editors/linux.ts
+++ b/app/src/lib/editors/linux.ts
@@ -1,5 +1,5 @@
 import { pathExists } from 'fs-extra'
-
+import { join } from 'path'
 import { IFoundEditor } from './found-editor'
 
 /** Represents an external editor on Linux */
@@ -34,7 +34,7 @@ const editors: ILinuxExternalEditor[] = [
   },
   {
     name: 'VSCodium',
-    paths: ['/usr/bin/codium','/var/lib/flatpak/app/com.vscodium.codium'],
+    paths: ['/usr/bin/codium', '/var/lib/flatpak/app/com.vscodium.codium', '/usr/share/vscodium-bin/bin/codium'],
   },
   {
     name: 'Sublime Text',
@@ -62,12 +62,25 @@ const editors: ILinuxExternalEditor[] = [
 ]
 
 async function getAvailablePath(paths: string[]): Promise<string | null> {
-  for (const path of paths) {
-    if (await pathExists(path)) {
-      return path
+  if (process.env.FLATPAK_HOST !== 'undefined') {
+    for (const path of paths) {
+      if (path.indexOf("/usr/") > -1) {
+        if (await pathExists(join("/var/run/host", path))) {
+          return path
+        }
+      } else {
+        if (await pathExists(path)) {
+          return path
+        }
+      }
+    }
+  } else {
+    for (const path of paths) {
+      if (await pathExists(path)) {
+        return path
+      }
     }
   }
-
   return null
 }
 
diff --git a/app/src/lib/shells/linux.ts b/app/src/lib/shells/linux.ts
index 47a5c7f03..ccc3bb5da 100644
--- a/app/src/lib/shells/linux.ts
+++ b/app/src/lib/shells/linux.ts
@@ -3,6 +3,7 @@ import { pathExists } from 'fs-extra'
 import { assertNever } from '../fatal-error'
 import { IFoundShell } from './found-shell'
 import { parseEnumValue } from '../enum'
+import { join } from 'path'
 
 export enum Shell {
   Gnome = 'GNOME Terminal',
@@ -27,7 +28,12 @@ export function parse(label: string): Shell {
 }
 
 async function getPathIfAvailable(path: string): Promise<string | null> {
-  return (await pathExists(path)) ? path : null
+  if (process.env.FLATPAK_HOST !== 'undefined') {
+    var path_to_search: string = join("/var/run/host", path)
+    return (await pathExists(path_to_search)) ? path : null
+  } else {
+    return (await pathExists(path)) ? path : null
+  }
 }
 
 function getShellPath(shell: Shell): Promise<string | null> {
@@ -157,29 +163,57 @@ export function launch(
   path: string
 ): ChildProcess {
   const shell = foundShell.shell
-  switch (shell) {
-    case Shell.Gnome:
-    case Shell.Mate:
-    case Shell.Tilix:
-    case Shell.Terminator:
-    case Shell.XFCE:
-    case Shell.Alacritty:
-      return spawn(foundShell.path, ['--working-directory', path])
-    case Shell.Urxvt:
-      return spawn(foundShell.path, ['-cd', path])
-    case Shell.Konsole:
-      return spawn(foundShell.path, ['--workdir', path])
-    case Shell.Xterm:
-      return spawn(foundShell.path, ['-e', '/bin/bash'], { cwd: path })
-    case Shell.Terminology:
-      return spawn(foundShell.path, ['-d', path])
-    case Shell.Deepin:
-      return spawn(foundShell.path, ['-w', path])
-    case Shell.Elementary:
-      return spawn(foundShell.path, ['-w', path])
-    case Shell.Kitty:
-      return spawn(foundShell.path, ['--single-instance', '--directory', path])
-    default:
-      return assertNever(shell, `Unknown shell: ${shell}`)
+  if (process.env.FLATPAK_HOST !== 'undefined') {
+    switch (shell) {
+      case Shell.Gnome:
+      case Shell.Mate:
+      case Shell.Tilix:
+      case Shell.Terminator:
+      case Shell.XFCE:
+      case Shell.Alacritty:
+        return spawn("flatpak-spawn", ["--host", foundShell.path, '--working-directory', path])
+      case Shell.Urxvt:
+        return spawn("flatpak-spawn", ["--host", foundShell.path, '-cd', path])
+      case Shell.Konsole:
+        return spawn("flatpak-spawn", ["--host", foundShell.path, '--workdir', path])
+      case Shell.Xterm:
+        return spawn("flatpak-spawn", ["--host", foundShell.path, '-e', '/bin/bash'], { cwd: path })
+      case Shell.Terminology:
+        return spawn("flatpak-spawn", ["--host", foundShell.path, '-d', path])
+      case Shell.Deepin:
+        return spawn("flatpak-spawn", ["--host", foundShell.path, '-w', path])
+      case Shell.Elementary:
+        return spawn("flatpak-spawn", ["--host", foundShell.path, '-w', path])
+      case Shell.Kitty:
+        return spawn("flatpak-spawn", ["--host", foundShell.path, '--single-instance', '--directory', path])
+      default:
+        return assertNever(shell, `Unknown shell: ${shell}`)
+    }
+  } else {
+    switch (shell) {
+      case Shell.Gnome:
+      case Shell.Mate:
+      case Shell.Tilix:
+      case Shell.Terminator:
+      case Shell.XFCE:
+      case Shell.Alacritty:
+        return spawn(foundShell.path, ['--working-directory', path])
+      case Shell.Urxvt:
+        return spawn(foundShell.path, ['-cd', path])
+      case Shell.Konsole:
+        return spawn(foundShell.path, ['--workdir', path])
+      case Shell.Xterm:
+        return spawn(foundShell.path, ['-e', '/bin/bash'], { cwd: path })
+      case Shell.Terminology:
+        return spawn(foundShell.path, ['-d', path])
+      case Shell.Deepin:
+        return spawn(foundShell.path, ['-w', path])
+      case Shell.Elementary:
+        return spawn(foundShell.path, ['-w', path])
+      case Shell.Kitty:
+        return spawn(foundShell.path, ['--single-instance', '--directory', path])
+      default:
+        return assertNever(shell, `Unknown shell: ${shell}`)
+    }
   }
 }
diff --git a/app/src/lib/shells/shared.ts b/app/src/lib/shells/shared.ts
index f09bfdfa7..2e4bb47de 100644
--- a/app/src/lib/shells/shared.ts
+++ b/app/src/lib/shells/shared.ts
@@ -6,6 +6,7 @@ import * as Win32 from './win32'
 import * as Linux from './linux'
 import { IFoundShell } from './found-shell'
 import { ShellError } from './error'
+import { join } from 'path'
 
 export type Shell = Darwin.Shell | Win32.Shell | Linux.Shell
 
@@ -81,7 +82,12 @@ export async function launchShell(
   // We have to manually cast the wider `Shell` type into the platform-specific
   // type. This is less than ideal, but maybe the best we can do without
   // platform-specific build targets.
-  const exists = await pathExists(shell.path)
+  let exists
+  if (process.env.FLATPAK_HOST !== 'undefined') {
+    exists = await pathExists(join("/var/run/host/", shell.path))
+  } else {
+    exists = await pathExists(shell.path)
+  }
   if (!exists) {
     const label = __DARWIN__ ? 'Preferences' : 'Options'
     throw new ShellError(
